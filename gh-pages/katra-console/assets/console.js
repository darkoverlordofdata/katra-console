// Generated by CoffeeScript 1.6.3
(function($, window, document) {
  var Console;
  $.prototype.console = function($options) {
    var _ref;
    if ($options == null) {
      $options = {};
    }
    return (_ref = $.data(this, 'console')) != null ? _ref : $.data(this, 'console', new Console(this, $options));
  };
  return Console = (function() {
    var KEY_BS, KEY_C, KEY_CR, KEY_DOWN, KEY_ESC, KEY_S, KEY_TAB, KEY_UP;

    KEY_BS = 8;

    KEY_TAB = 9;

    KEY_CR = 13;

    KEY_ESC = 27;

    KEY_UP = 38;

    KEY_DOWN = 40;

    KEY_C = 67;

    KEY_S = 83;

    Console.prototype.histpos = 0;

    Console.prototype.history = null;

    Console.prototype.input = null;

    Console.prototype.output = null;

    Console.prototype.prompt = null;

    Console.prototype["default"] = {
      autofocus: true,
      history: true,
      welcome: '',
      prompt: '> ',
      promptAlt: '? ',
      handle: function() {}
    };

    function Console($container, $options) {
      var $auto, $this;
      $this = this;
      $this.history = [];
      $options = $.extend(this["default"], $options);
      $auto = $options.autofocus ? 'autofocus' : '';
      $container.html("<output></output>\n<div id=\"input-line\" class=\"input-line\">\n<div class=\"prompt\"></div><div><input class=\"cmdline\" " + $auto + " /></div>\n</div>");
      this.output = $container.find('output');
      this.prompt = $container.find('#input-line .prompt');
      this.input = $container.find('#input-line .cmdline');
      this.prompt.text($options.prompt);
      this.print("<div>" + $options.welcome + "</div>");
      $(window).on('click', function($e) {
        return $this.input.focus();
      });
      $(document.body).on('keydown', function($e) {
        if ($e.keyCode === KEY_ESC) {
          $e.stopPropagation();
          $this.clear(this);
          return $e.preventDefault();
        }
      });
      this.input.on('click', function($e) {
        return this.value = this.value;
      });
      this.input.on('keyup', function($e) {
        var $temp;
        if (!$options.history) {
          return;
        }
        $temp = 0;
        if ($this.history.length) {
          if ($e.keyCode === KEY_UP || $e.keyCode === KEY_DOWN) {
            if ($this.history[$this.histpos]) {
              $this.history[$this.histpos] = this.value;
            } else {
              $temp = this.value;
            }
          }
          if ($e.keyCode === KEY_UP) {
            $this.histpos--;
            if ($this.histpos < 0) {
              $this.histpos = 0;
            }
          } else if ($e.keyCode === KEY_DOWN) {
            $this.histpos++;
            if ($this.histpos > $this.history.length) {
              $this.histpos = $this.history.length;
            }
          }
          if ($e.keyCode === KEY_UP || $e.keyCode === KEY_DOWN) {
            this.value = $this.history[$this.histpos] ? $this.history[$this.histpos] : $temp;
            return this.value = this.value;
          }
        }
      });
      this.input.on('keydown', function($e) {
        if ($e.ctrlKey || $e.metaKey) {
          switch ($e.keyCode) {
            case KEY_S:
              $container.toggleClass('flicker');
              $e.preventDefault();
              return $e.stopPropagation();
          }
        }
      });
      this.input.on('keydown', function($e) {
        var $input, $line;
        switch ($e.keyCode) {
          case KEY_BS:
            if (!this.value) {

            }
            break;
          case KEY_TAB:
            return $e.preventDefault;
          case KEY_CR:
            if (this.value) {
              $this.history[$this.history.length] = this.value;
              $this.histpos = $this.history.length;
            }
            $line = this.parentNode.parentNode.cloneNode(true);
            $line.removeAttribute('id');
            $line.classList.add('line');
            $input = $line.querySelector('input.cmdline');
            $input.autofocus = false;
            $input.readOnly = true;
            $this.output.append($line);
            if (this.value && this.value.trim()) {
              $options.handle(this.value);
            }
            return this.value = '';
        }
      });
    }

    Console.prototype.clear = function($input) {
      this.output.html('');
      return $input.value = '';
    };

    Console.prototype.prompt = function($prompt) {
      if ($prompt == null) {
        $prompt = 0;
      }
      if ($prompt === 0) {
        return this.prompt.text($options.prompt);
      } else {
        return this.prompt.text($options.promptAlt);
      }
    };

    Console.prototype.print = function(html) {
      if (html == null) {
        html = '';
      }
      this.output.append(html);
      return this.input.get(0).scrollIntoView();
    };

    return Console;

  })();
})(jQuery, window, document);
